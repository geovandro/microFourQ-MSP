////////////////////////////////////////////////////////////////////////////////
// Squaring of a UINT16 array of size 8: r = a^2                              //
//                                                                            //
// Authors: Geovandro Pereira and Hwajeong Seo                                //
////////////////////////////////////////////////////////////////////////////////

#include <msp430.h>

NAME mp_sqr128            ; module name
PUBLIC mp_sqr128          ; make the main label vissible outside this module
RSEG CODE                 ; place program in 'CODE' segment



; R12 -- the starting address of array 'a'
; R13 -- the starting address of array 'r'

#define APTR R12
#define RPTR R13

#define BPTR R14

#define CARRY R15
#define CARRY2 R14

mp_sqr128: ; NOP             ; main program
        ; MOV #WDTPW+WDTHOLD,&WDTCTL    ; stop watchdog timer
        
        // push callee-saved registers on stack
        
        ; a[0 - 7]
        MOV  APTR, BPTR
        ADD #2, APTR
        
        
        //1
        MOV  @APTR+, &MPY        ; load a[1] to the first operand           
        MOV  @BPTR,  &OP2        ; load b[0] to the second operand
        
        MOV  &RESLO, 2(RPTR)     ; c[1]
        MOV  &RESHI, &RESLO      ; 
        CLR  &RESHI
        
        //2
        MOV  @APTR+, &MAC        ; load a[2] to the first operand           
        MOV  @BPTR+,  &OP2       ; load b[0] to the second operand
        
        MOV  &RESLO, 4(RPTR)     ; c[2]
        MOV  &RESHI, &RESLO      ; 
        CLR  &RESHI
        
        //3
        MOV  @BPTR, &OP2         ; load b[1] to the second operand
        //NOP
        SUB #2, BPTR
        MOV  &SUMEXT, CARRY
        
        //
        MOV  @APTR+, &MAC        ; load a[3] to the first operand   
        MOV  @BPTR+, &OP2        ; load b[0] to the second operand        
                
        MOV  &RESLO, 6(RPTR)     ; c[3]
        MOV  &RESHI,  &RESLO     ; load the upper 16-bit to be part of the lower 16-bit
        ADD  &SUMEXT, CARRY        
        MOV  CARRY, &RESHI
        
        //4
        MOV  @BPTR, &OP2         ; load b[1] to the second operand
        //NOP
        SUB #2, BPTR
        MOV  &SUMEXT, CARRY
        
        //
        MOV  @APTR, &MAC         ; load a[4] to the first operand           
        MOV  @BPTR+, &OP2        ; load b[0] to the second operand
                
        MOV  &RESLO, 8(RPTR)     ; c[4]
        MOV  &RESHI,  &RESLO     ; load the upper 16-bit to be part of the lower 16-bit
        ADD  &SUMEXT, CARRY        
        MOV  CARRY, &RESHI
        
        //5
        MOV  @BPTR+, &OP2        ; load b[1] to the second operand
        //NOP
        SUB #2, APTR
        MOV  &SUMEXT, CARRY
        
        //
        MOV  @APTR, &MAC         ; load a[3] to the first operand           
        MOV  @BPTR, &OP2         ; load b[2] to the second operand
        //NOP
        ADD #4, APTR
        SUB #4, BPTR
        ADD  &SUMEXT, CARRY
        
        //
        MOV  @APTR, &MAC         ; load a[5] to the first operand   
        MOV  @BPTR+, &OP2        ; load b[0] to the second operand        
                
        MOV  &RESLO, 10(RPTR)    ; c[5]
        MOV  &RESHI,  &RESLO     ; load the upper 16-bit to be part of the lower 16-bit
        ADD  &SUMEXT, CARRY        
        MOV  CARRY, &RESHI
        
        //6
        MOV  @BPTR+, &OP2        ; load b[1] to the second operand
        //NOP
        SUB #2, APTR
        MOV  &SUMEXT, CARRY
        
        //
        MOV  @APTR+, &MAC        ; load a[4] to the first operand 
        MOV  @BPTR, &OP2         ; load b[2] to the second operand
        //NOP
        ADD #2, APTR
        SUB #4, BPTR
        ADD  &SUMEXT, CARRY
        
        //
        MOV  @APTR+, &MAC        ; load a[6] to the first operand           
        MOV  @BPTR+, &OP2        ; load b[0] to the second operand
                
        MOV  &RESLO, 12(RPTR)    ; c[6]
        MOV  &RESHI,  &RESLO     ; load the upper 16-bit to be part of the lower 16-bit
        ADD  &SUMEXT, CARRY        
        MOV  CARRY, &RESHI
        
        //7
        MOV  @BPTR, &OP2         ; load b[1] to the second operand        
        //NOP
        SUB #2, BPTR
        MOV  &SUMEXT, CARRY
        
        //
        MOV  @APTR, &MAC         ; load a[7] to the first operand   
        MOV  @BPTR, &OP2         ; load b[0] to the second operand        
        //NOP
        SUB #6, APTR
        ADD #6, BPTR
        ADD  &SUMEXT, CARRY
        
        MOV  @APTR+, &MAC        ; load a[4] to the first operand   
        MOV  @BPTR, &OP2         ; load b[3] to the second operand        
        //NOP
        SUB #2, BPTR
        ADD  &SUMEXT, CARRY
        
        //
        MOV  @APTR+, &MAC        ; load a[5] to the first operand           
        MOV  @BPTR+, &OP2        ; load b[2] to the second operand                
        
        MOV  &RESLO, 14(RPTR)    ; c[7]
        MOV  &RESHI,  &RESLO     ; load the upper 16-bit to be part of the lower 16-bit
        ADD  &SUMEXT, CARRY        
        MOV  CARRY, &RESHI   
        
        //8
        MOV  @BPTR, &OP2         ; load b[3] to the second operand
        //NOP
        SUB #2, BPTR
        MOV  &SUMEXT, CARRY
        
        
        //
        MOV  @APTR+, &MAC        ; load a[6] to the first operand           
        MOV  @BPTR, &OP2         ; load b[2] to the second operand
        //NOP
        SUB #2, BPTR
        ADD  &SUMEXT, CARRY
                
        //
        MOV  @APTR, &MAC         ; load a[7] to the first operand           
        MOV  @BPTR+, &OP2        ; load b[1] to the second operand
                
        MOV  &RESLO, 16(RPTR)    ; c[8]
        MOV  &RESHI,  &RESLO     ; load the upper 16-bit to be part of the lower 16-bit
        ADD  &SUMEXT, CARRY        
        MOV  CARRY, &RESHI   
        
        //9
        MOV  @BPTR+, &OP2       ; load b[2] to the second operand
        //NOP
        SUB #4, APTR
        ADD #2, BPTR
        MOV  &SUMEXT, CARRY
        
        
        //
        MOV  @APTR+, &MAC        ; load a[5] to the first operand           
        MOV  @BPTR, &OP2         ; load b[4] to the second operand
        //NOP
        SUB #2, BPTR
        ADD  &SUMEXT, CARRY
        
        //
        MOV  @APTR+, &MAC        ; load a[6] to the first operand   
        MOV  @BPTR+, &OP2        ; load b[3] to the second operand        
                
        MOV  &RESLO, 18(RPTR)    ; c[9]
        MOV  &RESHI,  &RESLO     ; load the upper 16-bit to be part of the lower 16-bit
        ADD  &SUMEXT, CARRY        
        MOV  CARRY, &RESHI   
   
      
        //10
        MOV  @BPTR, &OP2         ; load b[4] to the second operand
        //NOP
        SUB #2, BPTR
        MOV  &SUMEXT, CARRY
   
   
        //
        MOV  @APTR, &MAC         ; load a[7] to the first operand           
        MOV  @BPTR+, &OP2        ; load b[3] to the second operand
                
        MOV  &RESLO, 20(RPTR)    ; c[10]
        MOV  &RESHI,  &RESLO     ; load the upper 16-bit to be part of the lower 16-bit
        ADD  &SUMEXT, CARRY        
        MOV  CARRY, &RESHI   
        
        //11
        MOV  @BPTR+, &OP2        ; load b[4] to the second operand
        //NOP
        SUB #2, APTR
        MOV  &SUMEXT, CARRY
       
        
        //
        MOV  @APTR+, &MAC        ; load a[6] to the first operand           
        MOV  @BPTR, &OP2         ; load b[5] to the second operand
                
        MOV  &RESLO, 22(RPTR)    ; c[11]
        MOV  &RESHI,  &RESLO     ; load the upper 16-bit to be part of the lower 16-bit
        ADD  &SUMEXT, CARRY        
        MOV  CARRY, &RESHI   
        
        
        //12
        MOV  @APTR, &MAC         ; load a[7] to the first operand           
        MOV  @BPTR+, &OP2        ; load b[5] to the second operand
        MOV  &RESLO, 24(RPTR)    ; c[12]
        MOV  &RESHI,  &RESLO     ; load the upper 16-bit to be part of the lower 16-bit
        MOV  &SUMEXT, &RESHI 
        
        
        //13
        MOV  @BPTR, &OP2         ; load b[6] to the second operand
        MOV  &RESLO, 26(RPTR)    ; c[13]
        MOV  &RESHI, 28(RPTR)    ; c[14]
        
        CLR CARRY
        MOV  CARRY, 30(RPTR)
        
        ADD 2(RPTR), 2(RPTR)
        ADDC 4(RPTR), 4(RPTR)
        ADDC 6(RPTR), 6(RPTR)
        
        ADDC 8(RPTR), 8(RPTR)
        ADDC 10(RPTR), 10(RPTR)
        ADDC 12(RPTR), 12(RPTR)
        ADDC 14(RPTR), 14(RPTR)
        
        ADDC 16(RPTR), 16(RPTR)
        ADDC 18(RPTR), 18(RPTR)
        ADDC 20(RPTR), 20(RPTR)
        ADDC 22(RPTR), 22(RPTR)
        
        ADDC 24(RPTR), 24(RPTR)
        ADDC 26(RPTR), 26(RPTR)
        ADDC 28(RPTR), 28(RPTR)
        ADDC 30(RPTR), 30(RPTR)
        
        
        //
        SUB #14, APTR
        CLR CARRY
        
        MOV  @APTR, &MPY         ; load a[0] to the first operand           
        MOV  @APTR+,  &OP2       ; load b[0] to the second operand
        
        MOV  &RESLO, 0(RPTR)//FIRST
        ADD  &RESHI, 2(RPTR)
        ADC CARRY
        MOV CARRY, CARRY2
        CLR CARRY
        
        //
        MOV  @APTR, &MPY         ; load a[1] to the first operand           
        MOV  @APTR+,  &OP2       ; load b[1] to the second operand
        
        ADD    #0XFFFF, CARRY2
        ADDC  &RESLO, 4(RPTR)
        ADDC  &RESHI, 6(RPTR)
        ADC CARRY
        
        MOV CARRY, CARRY2
        CLR CARRY
        
        //
        MOV  @APTR, &MPY         ; load a[2] to the first operand           
        MOV  @APTR+,  &OP2       ; load b[2] to the second operand
        
        ADD    #0XFFFF, CARRY2
        ADDC  &RESLO, 8(RPTR)
        ADDC  &RESHI, 10(RPTR)
        ADC CARRY
        
        MOV CARRY, CARRY2
        CLR CARRY
        //
        MOV  @APTR, &MPY         ; load a[3] to the first operand           
        MOV  @APTR+,  &OP2       ; load b[3] to the second operand
        
        ADD    #0XFFFF, CARRY2
        ADDC  &RESLO, 12(RPTR)
        ADDC  &RESHI, 14(RPTR)
        ADC CARRY
        
        MOV CARRY, CARRY2
        CLR CARRY
        //
        MOV  @APTR, &MPY         ; load a[4] to the first operand           
        MOV  @APTR+,  &OP2       ; load b[4] to the second operand
        
        ADD    #0XFFFF, CARRY2
        ADDC  &RESLO, 16(RPTR)
        ADDC  &RESHI, 18(RPTR)
        ADC CARRY
        
        MOV CARRY, CARRY2
        CLR CARRY
        //
        MOV  @APTR, &MPY         ; load a[5] to the first operand           
        MOV  @APTR+,  &OP2       ; load b[5] to the second operand
        
        ADD    #0XFFFF, CARRY2
        ADDC  &RESLO, 20(RPTR)
        ADDC  &RESHI, 22(RPTR)
        ADC CARRY
        
        MOV CARRY, CARRY2
        CLR CARRY
        //
        MOV  @APTR, &MPY         ; load a[6] to the first operand           
        MOV  @APTR+,  &OP2       ; load b[6] to the second operand
        
        ADD    #0XFFFF, CARRY2
        ADDC  &RESLO, 24(RPTR)
        ADDC  &RESHI, 26(RPTR)
        ADC CARRY
        
        MOV CARRY, CARRY2
        CLR CARRY
        //
        MOV  @APTR, &MPY         ; load a[7] to the first operand           
        MOV  @APTR+,  &OP2       ; load b[7] to the second operand
        
        ADD    #0XFFFF, CARRY2
        ADDC  &RESLO, 28(RPTR)
        ADDC  &RESHI, 30(RPTR)
        
        
        RETA
        
END
